def aminoMassTable():
    aminoMass = {
        'G': 57,
        'A': 71,
        'S': 87,
        'P': 97,
        'V': 99,
        'T': 101,
        'C': 103,
        'I': 113,
        'L': 113,
        'N': 114,
        'D': 115,
        'K': 128,
        'Q': 128,
        'E': 129,
        'M': 131,
        'H': 137,
        'F': 147,
        'R': 156,
        'Y': 163,
        'W': 186
    }
    return aminoMass

def linearSpectrum(peptide):
    aminoMassT = aminoMassTable()
    prefixMass = {
        0: 0
    }
    for i in range(len(peptide)):
        for j in range(20):
            if(list(aminoMassT.keys())[j] == peptide[i]):
                prefixMass[i + 1] = prefixMass[i] + aminoMassT[peptide[i]]
    
    linearSpc = [0]
    for i in range(len(peptide)):
        for j in range(i + 1, len(peptide) + 1):
            linearSpc.append(prefixMass[j] - prefixMass[i])
    return sorted(linearSpc)

peptide = "WWERDQVTHDPERNTDCTNDPCATDNNHVAMNWEVQHFTIVWRRKQYSI"
ls = linearSpectrum(peptide)
expMass = "0 71 71 87 97 97 99 99 99 99 99 101 101 101 101 101 101 103 103 113 113 114 114 114 114 115 115 115 115 128 128 128 128 129 129 129 131 137 137 137 137 147 147 156 156 156 156 163 170 172 174 186 186 200 200 200 202 202 204 204 212 212 212 215 215 216 226 227 227 228 229 230 236 238 243 243 244 248 250 250 251 252 256 257 261 265 270 271 271 275 284 284 284 285 285 285 287 291 301 301 305 305 307 312 315 315 316 318 326 328 330 337 341 342 342 345 349 349 350 353 356 358 362 363 364 371 372 372 378 380 382 386 390 397 398 399 399 400 404 406 412 412 414 414 416 416 419 419 419 421 421 427 429 433 438 440 441 443 450 452 459 465 472 478 479 487 487 487 491 493 495 496 496 497 498 498 500 500 500 506 511 513 518 519 519 520 520 530 530 530 534 534 535 537 542 545 549 549 550 552 554 568 575 575 579 580 580 586 594 596 597 597 599 599 601 601 601 602 611 616 616 619 626 631 633 633 633 633 634 634 635 640 641 644 647 648 651 662 662 665 667 676 677 678 679 681 682 691 695 695 698 700 702 704 704 710 712 715 715 716 723 725 730 731 731 732 734 735 736 746 748 749 754 761 761 761 766 766 770 772 775 777 778 780 790 792 796 801 805 805 805 806 813 814 817 818 819 826 834 835 837 837 837 838 838 843 845 845 846 847 847 849 849 851 852 853 860 860 867 869 890 895 897 902 905 906 906 909 916 917 919 920 921 925 931 940 942 946 947 948 948 949 950 950 951 952 959 961 962 963 966 966 966 966 968 975 975 980 982 984 989 994 996 1002 1004 1007 1016 1016 1017 1020 1021 1034 1037 1046 1049 1049 1049 1051 1053 1056 1060 1062 1065 1067 1071 1076 1076 1077 1077 1079 1079 1081 1081 1095 1096 1098 1099 1103 1103 1103 1105 1117 1121 1122 1122 1127 1129 1131 1131 1131 1131 1150 1150 1152 1154 1154 1163 1168 1170 1175 1175 1175 1176 1177 1178 1182 1191 1193 1193 1194 1195 1196 1197 1202 1210 1213 1216 1216 1216 1226 1228 1233 1234 1236 1246 1250 1251 1253 1253 1255 1259 1259 1264 1264 1266 1266 1267 1268 1274 1277 1278 1283 1292 1296 1300 1305 1306 1309 1310 1311 1322 1325 1329 1330 1331 1331 1334 1343 1347 1353 1354 1356 1358 1361 1363 1363 1365 1365 1367 1369 1377 1381 1382 1382 1383 1387 1387 1392 1393 1397 1399 1401 1402 1405 1406 1410 1413 1437 1439 1446 1448 1448 1453 1459 1460 1466 1468 1470 1476 1476 1477 1479 1480 1481 1481 1482 1484 1485 1486 1487 1496 1496 1498 1500 1500 1500 1502 1503 1515 1517 1517 1521 1521 1538 1549 1549 1550 1568 1571 1574 1575 1581 1582 1583 1583 1584 1591 1595 1595 1596 1597 1597 1601 1601 1606 1609 1613 1613 1614 1614 1615 1616 1616 1618 1618 1635 1637 1650 1650 1652 1654 1662 1672 1673 1675 1678 1680 1681 1682 1684 1696 1697 1700 1702 1709 1711 1711 1712 1712 1715 1721 1727 1733 1743 1743 1746 1747 1747 1750 1753 1753 1755 1755 1761 1764 1765 1772 1772 1777 1783 1783 1786 1796 1797 1801 1801 1803 1808 1809 1810 1811 1818 1822 1826 1826 1849 1854 1854 1856 1856 1858 1861 1862 1864 1867 1870 1871 1878 1886 1893 1898 1900 1900 1901 1902 1903 1906 1910 1911 1911 1912 1917 1917 1923 1924 1929 1942 1946 1955 1955 1959 1968 1971 1971 1974 1976 1977 1982 1982 1987 1993 1996 1998 1999 2000 2001 2011 2012 2014 2015 2016 2026 2028 2030 2031 2038 2054 2061 2070 2070 2071 2072 2073 2073 2079 2083 2083 2088 2092 2093 2097 2097 2100 2102 2106 2113 2113 2114 2115 2115 2116 2133 2139 2141 2143 2159 2168 2168 2171 2172 2175 2179 2180 2182 2191 2198 2198 2199 2201 2202 2202 2208 2210 2212 2214 2215 2217 2229 2230 2230 2230 2242 2242 2246 2250 2253 2256 2276 2278 2283 2283 2292 2297 2299 2301 2313 2313 2316 2322 2322 2324 2327 2327 2329 2331 2338 2343 2343 2344 2345 2345 2349 2351 2354 2354 2357 2358 2379 2391 2393 2398 2409 2412 2414 2420 2423 2428 2430 2430 2441 2441 2442 2442 2444 2450 2450 2452 2453 2455 2458 2459 2466 2469 2480 2480 2487 2487 2492 2501 2513 2513 2521 2522 2526 2531 2544 2549 2551 2556 2557 2558 2560 2568 2570 2572 2578 2579 2580 2581 2581 2584 2584 2586 2593 2598 2602 2615 2616 2620 2627 2628 2629 2650 2652 2663 2669 2671 2673 2677 2687 2692 2693 2695 2696 2699 2699 2709 2712 2713 2714 2715 2716 2716 2717 2728 2740 2743 2743 2748 2751 2751 2764 2772 2776 2784 2792 2797 2812 2813 2824 2828 2829 2830 2831 2836 2842 2843 2843 2846 2849 2850 2851 2857 2863 2865 2868 2872 2875 2877 2879 2899 2925 2927 2937 2940 2940 2943 2948 2950 2958 2959 2960 2960 2965 2971 2976 2978 2978 2979 2980 2987 2994 2996 2998 3013 3019 3036 3049 3055 3055 3061 3064 3066 3068 3072 3074 3074 3077 3077 3088 3092 3093 3097 3099 3114 3120 3127 3135 3150 3159 3162 3164 3165 3165 3169 3175 3183 3187 3191 3192 3192 3196 3196 3211 3217 3224 3246 3248 3249 3251 3262 3263 3264 3264 3267 3270 3279 3288 3293 3293 3297 3310 3311 3318 3329 3339 3347 3349 3350 3359 3359 3361 3373 3377 3377 3381 3392 3392 3398 3398 3408 3419 3425 3430 3435 3446 3462 3474 3474 3474 3476 3476 3476 3497 3501 3507 3512 3520 3526 3529 3533 3533 3536 3559 3561 3564 3573 3575 3577 3588 3589 3602 3611 3613 3629 3635 3657 3662 3663 3665 3674 3675 3676 3683 3688 3689 3689 3689 3703 3714 3726 3730 3759 3764 3772 3776 3788 3791 3792 3797 3804 3812 3813 3817 3818 3825 3827 3831 3845 3874 3879 3889 3892 3893 3911 3915 3919 3926 3926 3926 3928 3941 3945 3973 3974 3980 3992 3994 4011 4025 4025 4029 4030 4039 4054 4056 4071 4075 4081 4093 4101 4102 4108 4112 4153 4153 4167 4169 4176 4176 4186 4194 4195 4199 4211 4212 4230 4264 4268 4268 4290 4308 4313 4314 4323 4323 4325 4327 4339 4351 4367 4393 4424 4424 4426 4437 4442 4451 4454 4460 4464 4480 4490 4495 4523 4525 4552 4573 4574 4577 4579 4593 4605 4610 4610 4651 4651 4672 4680 4687 4690 4692 4711 4742 4766 4766 4779 4779 4786 4805 4829 4843 4858 4867 4894 4907 4922 4930 4942 4942 4972 5014 5022 5023 5029 5043 5050 5070 5128 5142 5151 5157 5170 5178 5185 5270 5272 5279 5284 5298 5341 5385 5412 5426 5428 5442 5529 5540 5541 5589 5642 5676 5703 5789 5790 5903"
expMass = expMass.split(" ")
ls = linearSpectrum(peptide)
ls = list(map(str, ls))

from collections import Counter

counter1 = Counter(expMass)
counter2 = Counter(ls)

common_elements = counter1 & counter2
count = sum(common_elements.values())
print(count)