from collections import Counter

def aminoMassTable():
    aminoMass = {
        'G': 57,
        'A': 71,
        'S': 87,
        'P': 97,
        'V': 99,
        'T': 101,
        'C': 103,
        'I': 113,
        'L': 113,
        'N': 114,
        'D': 115,
        'K': 128,
        'Q': 128,
        'E': 129,
        'M': 131,
        'H': 137,
        'F': 147,
        'R': 156,
        'Y': 163,
        'W': 186
    }
    return aminoMass

def linearSpectrum(peptide):
    aminoMassT = aminoMassTable()
    prefixMass = {
        0: 0
    }
    for i in range(len(peptide)):
        for j in range(20):
            if(list(aminoMassT.keys())[j] == peptide[i]):
                prefixMass[i + 1] = prefixMass[i] + aminoMassT[peptide[i]]
    
    linearSpc = [0]
    for i in range(len(peptide)):
        for j in range(i + 1, len(peptide) + 1):
            linearSpc.append(prefixMass[j] - prefixMass[i])
    return sorted(linearSpc)

def linearScore(expMass, peptide):
    expMass = expMass.split(" ")
    ls = linearSpectrum(peptide)
    ls = list(map(str, ls))
    counter1 = Counter(expMass)
    counter2 = Counter(ls)

    common_elements = counter1 & counter2
    count = sum(common_elements.values())
    return count

peptides = "IHCRHGWMGNDYDPYPQPNDNWYRITYMLEVHLPKLF AKGQYPEGKKHHYFWHPFQRKTWRDQNEEWFCKIQFP ARKGVNDIEMMIAPEIVNFWHINDLHACQSVNAASAI FICWTWWYRWGRWKHVHGKNHQCSGINTQNYTMTHYR YQICASEYQYKANCIHHLDKVPYRPAQLPRPVTQPIG TGWEPIAVWVWKIFCRCSKVHFHMETFLGVGKGTFQW IHKIYVGNCKPTGTSYNPHEGMFAPPFAEMYLQVYNR LSDKREGRHLKFYMYMQQVEFTMSKKCSFSYMIGANV LIEDADGIFEGLVTSQWVWRYMKQQCGNLTGTHVQPC KTGIAGRNKVCTREWAPSWAWDIDPCINSPNESRGPE NVREGRETHIQKFQINPICLDWKDGFDCGSDADIDHG LYPHDRRHPNFEASYVQYFLFGFLPIGLYKQNKWVKP LVQCWFTGTYTILYEINWHAIEVSYPPYFYINDNWKR QAFARFKSIAPKQASHSKLSMATGTISNIHKKDNIRR PTNSPIIWKNWPDLHCTMAFRYRLITACAYCMAIYGC QKTTEWKEHWWQWNCFFHAWDNSHYEEKNLWNRCNVW YKGYNTCYYDMYSAFAEWWEKHHSMVKLHRVYNQFAM DAATAYRCFHAFTELLFSSFDYSEQHEFQMYVNHTVR SSCCFCKILPWTYKVDHNRQGQDFHIIHRPTKQRWMS"
expMass = "0 57 87 87 87 87 97 99 99 101 113 113 113 113 114 115 115 115 115 128 128 128 129 131 131 137 147 147 156 156 163 163 163 163 163 186 186 186 188 200 202 204 212 214 215 218 224 228 229 229 241 243 244 244 250 253 256 260 260 262 273 276 276 277 285 285 292 300 301 301 303 310 316 316 319 327 328 328 331 337 342 342 343 367 371 372 373 375 381 387 388 388 390 390 392 398 400 400 405 406 414 416 416 418 423 429 429 439 444 444 447 457 458 462 465 487 487 487 489 491 494 500 503 504 504 505 513 513 513 514 516 518 534 536 536 537 546 553 557 559 566 568 570 572 574 579 591 591 600 601 602 604 604 604 605 625 628 628 634 644 647 649 650 653 666 667 668 669 673 673 674 677 682 685 687 699 699 704 706 715 716 717 719 729 732 747 754 754 761 764 767 772 772 775 780 781 781 786 788 790 797 797 800 812 813 814 816 816 832 832 834 847 855 860 862 867 876 877 878 879 885 887 887 896 901 901 902 909 910 910 917 926 928 931 933 943 944 947 947 953 960 963 970 975 990 992 1000 1000 1001 1002 1007 1020 1024 1027 1030 1030 1034 1040 1041 1041 1048 1057 1057 1059 1062 1065 1072 1073 1082 1087 1088 1091 1103 1114 1115 1117 1117 1140 1144 1148 1155 1163 1164 1169 1170 1170 1171 1172 1175 1176 1178 1186 1186 1187 1187 1190 1193 1204 1213 1219 1229 1232 1243 1245 1259 1271 1274 1276 1276 1277 1277 1283 1284 1289 1291 1300 1301 1307 1319 1326 1327 1333 1334 1334 1341 1342 1349 1358 1360 1373 1375 1376 1390 1390 1391 1392 1404 1404 1413 1415 1415 1422 1440 1446 1446 1447 1457 1457 1460 1463 1470 1481 1488 1489 1490 1491 1503 1505 1505 1513 1517 1521 1528 1538 1544 1544 1553 1560 1561 1569 1571 1575 1575 1578 1578 1601 1604 1604 1604 1609 1616 1628 1631 1633 1637 1659 1662 1668 1675 1676 1676 1677 1682 1689 1691 1694 1700 1703 1707 1714 1718 1719 1723 1732 1734 1741 1746 1761 1763 1774 1791 1794 1797 1802 1804 1813 1813 1823 1833 1838 1840 1845 1847 1847 1848 1854 1860 1863 1880 1881 1889 1891 1904 1909 1917 1926 1928 1932 1937 1938 1944 1947 1949 1950 1960 1961 1975 1983 1994 1995 1996 2003 2004 2004 2010 2026 2031 2041 2047 2048 2051 2057 2062 2065 2077 2089 2091 2095 2108 2109 2114 2123 2124 2139 2141 2144 2150 2157 2162 2163 2172 2176 2176 2189 2190 2194 2207 2210 2227 2228 2237 2251 2252 2259 2270 2272 2277 2277 2286 2289 2291 2304 2307 2325 2336 2339 2348 2350 2358 2365 2376 2383 2391 2393 2400 2401 2404 2405 2414 2417 2422 2440 2445 2447 2451 2452 2463 2491 2508 2511 2513 2514 2518 2528 2529 2530 2532 2538 2553 2560 2568 2577 2578 2595 2601 2605 2608 2610 2615 2628 2645 2657 2660 2661 2675 2676 2681 2681 2716 2723 2724 2742 2744 2748 2764 2764 2768 2773 2776 2781 2788 2791 2794 2823 2838 2844 2845 2861 2863 2875 2880 2881 2901 2904 2905 2905 2911 2920 2938 2957 2973 2976 2988 2991 2995 3017 3018 3024 3026 3032 3044 3052 3067 3068 3086 3089 3104 3109 3119 3119 3154 3164 3173 3180 3181 3181 3182 3206 3215 3217 3217 3220 3272 3279 3282 3304 3307 3310 3310 3327 3328 3330 3344 3348 3369 3385 3407 3417 3435 3438 3441 3442 3461 3470 3473 3491 3525 3535 3548 3548 3548 3554 3570 3598 3604 3620 3622 3626 3635 3677 3685 3698 3711 3717 3723 3751 3754 3772 3785 3798 3808 3848 3851 3864 3867 3886 3921 3935 3935 3954 3964 3995 4014 4051 4052 4082 4091 4098 4127 4139 4188 4214 4245 4254 4302 4351 4351 4401 4458 4498 4514 4555 4661 4718"
N = 6
peptideLst = peptides.split(" ")
leaderboard = {}
for p in peptideLst:
    leaderboard[p] = linearScore(expMass, p)

sortedLeaderboard = dict(sorted(leaderboard.items(), key=lambda x: x[1], reverse = True))
values = list(set(sortedLeaderboard.values()))
limit = values[N - 1]
LeaderBoard = []
for q in sortedLeaderboard.items():
    if(q[1] >= limit):
        LeaderBoard.append(q[0])

for i in LeaderBoard:
    print(i, end=" ")